import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {axiosSubmit} from "./loginApi";


const initialState = {
    loginState:{
        isLoginIn:false
    },
    alertState: {
        alertOpen:false,
        alertSeverity:'success',
        alertMessage:'',
        alertDuration:3000

    },
    requestState:{
        msg: '',
        status: null
    }
};

// submit
export const userLogin = createAsyncThunk(
    'home/login', //请求标准，这个 typePrefix 参数可以帮助你在处理多个异步操作时保持 Redux store 中的 action 类型唯一性
    async (formData) => {
        const response = await axiosSubmit(formData);
        // if (response.ok) {
        //     const data = await response.json();
        //     thunkAPI.dispatch(updateUser(data));
        //     return data;
        // } else {
        //     const error = await response.json();
        //     return thunkAPI.rejectWithValue(error);
        // }
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const loginSlice = createSlice({
    name: 'login',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            //userLogin.pending是createAsyncThunk自动生产的actionType
            .addCase(userLogin.pending, (state) => {
                state.alertState;
            })
            .addCase(userLogin.fulfilled, (state, action) => {
            })
            .addCase(userLogin.rejected, (state, action) => {

            });

    },
});

export const loginState = (state) => state.login.loginState;
export const alertState = (state) => state.login.alertState;
export const requestState = (state) => state.login.requestState;
export default loginSlice.reducer;

